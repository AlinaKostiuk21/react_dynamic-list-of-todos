{"version":3,"sources":["components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","api.ts","App.tsx","index.tsx"],"names":["TodoList","state","query","selectedStatus","handleChange","event","target","setState","value","checkTodosTitle","args","some","todo","toLowerCase","includes","checkTodosCompleted","completedStatus","status","changeTodoHandler","this","props","todos","selectUserId","selectedIdUser","visibleTodos","filter","title","completed","className","htmlFor","type","id","placeholder","onChange","name","map","checked","readOnly","userId","onClick","React","Component","CurrentUser","user","email","phone","request","url","fetch","then","response","ok","Error","statusText","json","App","selectedUserId","selectedUser","getUser","deselectCurrentUser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c11397d8.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport { Todo } from '../../react-app-env';\n\ninterface Props {\n  todos: Todo[] | [],\n  selectedIdUser: number,\n  selectUserId: (userId: number) => void,\n}\n\ninterface State {\n  query: string,\n  selectedStatus: string,\n}\n\nexport class TodoList extends React.Component<Props, State> {\n  state: State = {\n    query: '',\n    selectedStatus: 'all',\n  };\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { target } = event;\n\n    this.setState({\n      query: target.value,\n    });\n  };\n\n  checkTodosTitle = (...args: string[]) => {\n    return args.some(todo => todo.toLowerCase().includes(this.state.query.toLowerCase()));\n  };\n\n  checkTodosCompleted = (completedStatus: boolean, status: string) => {\n    switch (status) {\n      case 'active':\n        return completedStatus === false;\n      case 'completed':\n        return completedStatus === true;\n      default:\n        return completedStatus === true || completedStatus === false;\n    }\n  };\n\n  changeTodoHandler = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    this.setState({\n      selectedStatus: event.target.value,\n    });\n  };\n\n  render() {\n    const { query, selectedStatus } = this.state;\n    const { todos, selectUserId, selectedIdUser } = this.props;\n    const visibleTodos = todos.filter(\n      todo => this.checkTodosTitle(todo.title)\n        && this.checkTodosCompleted(todo.completed, selectedStatus),\n    );\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__field\">\n          <label htmlFor=\"search-query\" className=\"label\">\n            <span className=\"label__text\">Search todo</span>\n            <input\n              type=\"text\"\n              id=\"search-query\"\n              className=\"input\"\n              placeholder=\"Type search word\"\n              value={query}\n              onChange={this.handleChange}\n            />\n          </label>\n\n          <select\n            name=\"todoList\"\n            id=\"\"\n            value={selectedStatus}\n            onChange={this.changeTodoHandler}\n            className=\"select\"\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </div>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {visibleTodos.map(todo => (\n              <li\n                key={todo.id}\n                className=\"TodoList__item TodoList__item--unchecked\"\n              >\n                <label htmlFor=\"check1\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"check1\"\n                    checked={todo.completed}\n                    readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                {(todo.userId === selectedIdUser) ? (\n                  <button\n                    className=\"\n                  TodoList__user-button\n                  button\n                \"\n                    type=\"button\"\n                    onClick={() => {\n                      selectUserId(0);\n                    }}\n                  >\n                    {todo.userId}\n                  </button>\n                ) : (\n                  <button\n                    className=\"\n                  TodoList__user-button\n                  TodoList__user-button--selected\n                  button\n                \"\n                    type=\"button\"\n                    onClick={() => {\n                      selectUserId(todo.userId);\n                    }}\n                  >\n                    {todo.userId}\n                  </button>\n                )}\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { User } from '../../react-app-env';\n\ninterface Props {\n  user: User,\n}\n\nexport const CurrentUser: React.FC<Props> = ({ user }) => (\n  <div className=\"CurrentUser\">\n    <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${user.id}`}</span></h2>\n\n    <h3 className=\"CurrentUser__name\">{user.name}</h3>\n    <p className=\"CurrentUser__email\">{user.email}</p>\n    <p className=\"CurrentUser__phone\">{user.phone}</p>\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\nconst request = (url: string) => {\n  return fetch(`${BASE_URL}${url}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n};\n\nexport const getAllTodos = () => {\n  return request('/todos');\n};\n\nexport const getAllUsers = () => {\n  return request('/users');\n};\n\nexport const getUser = (userId: number) => {\n  return request(`/users/${userId}`);\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { Todo, User } from './react-app-env';\nimport { getAllTodos, getUser } from './api';\n\ninterface State {\n  selectedUserId: number,\n  todos: Todo[] | [],\n  selectedUser: User | null,\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n    selectedUser: null,\n  };\n\n  componentDidMount() {\n    if (!this.state.selectedUser) {\n      getAllTodos()\n        .then(todos => {\n          this.setState({ todos });\n        });\n    }\n  }\n\n  componentDidUpdate() {\n    const userId = this.state.selectedUserId;\n\n    getUser(userId)\n      .then(user => {\n        this.setState({ selectedUser: user });\n      });\n  }\n\n  deselectCurrentUser() {\n    this.setState({ selectedUser: null });\n  }\n\n  render() {\n    const { selectedUserId, todos, selectedUser } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectedIdUser={selectedUserId}\n            selectUserId={(userId: number) => {\n              return this.setState({ selectedUserId: userId });\n            }}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUser ? (\n              <>\n                <button\n                  type=\"button\"\n                  onClick={this.deselectCurrentUser}\n                >\n                  Clear\n                </button>\n                <CurrentUser\n                  user={selectedUser}\n                />\n              </>\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}