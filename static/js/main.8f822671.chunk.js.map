{"version":3,"sources":["components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","api.ts","App.tsx","index.tsx"],"names":["TodoList","state","query","selectedStatus","handleChange","event","target","setState","value","checkTodosTitle","args","some","todo","toLowerCase","includes","checkTodosCompleted","completedStatus","status","statusToCheck","changeTodoHandler","this","props","todos","selectUserId","selectedIdUser","visibleTodos","filter","title","completed","className","htmlFor","type","id","placeholder","onChange","name","map","isChecked","checked","readOnly","userId","onClick","React","Component","CurrentUser","user","email","phone","request","url","fetch","then","response","ok","Error","statusText","json","getUser","App","selectedUserId","selectedUser","errorGettingUser","componentDidUpdate","currentUserId","catch","deselectCurrentUser","message","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8f822671.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport { Todo } from '../../react-app-env';\n\ninterface Props {\n  todos: Todo[] | [],\n  selectedIdUser: number,\n  selectUserId: (userId: number) => void,\n}\n\ninterface State {\n  query: string,\n  selectedStatus: string,\n}\n\nexport class TodoList extends React.Component<Props, State> {\n  state: State = {\n    query: '',\n    selectedStatus: 'all',\n  };\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { target } = event;\n\n    this.setState({\n      query: target.value,\n    });\n  };\n\n  checkTodosTitle = (...args: string[]) => {\n    return args.some(todo => todo.toLowerCase().includes(this.state.query.toLowerCase()));\n  };\n\n  checkTodosCompleted = (completedStatus: boolean | null, status: string) => {\n    const statusToCheck = completedStatus || false;\n\n    switch (status) {\n      case 'active':\n        return statusToCheck === false;\n      case 'completed':\n        return statusToCheck === true;\n      default:\n        return statusToCheck === true || statusToCheck === false;\n    }\n  };\n\n  changeTodoHandler = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    this.setState({\n      selectedStatus: event.target.value,\n    });\n  };\n\n  render() {\n    const { query, selectedStatus } = this.state;\n    const { todos, selectUserId, selectedIdUser } = this.props;\n    const visibleTodos = todos.filter(\n      todo => this.checkTodosTitle(todo.title)\n        && this.checkTodosCompleted(todo.completed, selectedStatus),\n    );\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__field\">\n          <label htmlFor=\"search-query\" className=\"label\">\n            <span className=\"label__text\">Search todo</span>\n            <input\n              type=\"text\"\n              id=\"search-query\"\n              className=\"input\"\n              placeholder=\"Type search word\"\n              value={query}\n              onChange={this.handleChange}\n            />\n          </label>\n\n          <select\n            name=\"todoList\"\n            id=\"\"\n            value={selectedStatus}\n            onChange={this.changeTodoHandler}\n            className=\"select\"\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </div>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {visibleTodos.map(todo => {\n              const isChecked = todo.completed || false;\n\n              return (\n                <li\n                  key={todo.id}\n                  className=\"TodoList__item TodoList__item--unchecked\"\n                >\n                  <label htmlFor=\"check1\">\n                    <input\n                      type=\"checkbox\"\n                      id=\"check1\"\n                      checked={isChecked}\n                      readOnly\n                    />\n                    <p>{todo.title}</p>\n                  </label>\n\n                  {(todo.userId === selectedIdUser) ? (\n                    <button\n                      className=\"\n                    TodoList__user-button--selected\n                    TodoList__user-button\n                    button\n                  \"\n                      type=\"button\"\n                      onClick={() => {\n                        selectUserId(0);\n                      }}\n                    >\n                      {todo.userId}\n                    </button>\n                  ) : (\n                    <button\n                      className=\"\n                    TodoList__user-button\n                    button\n                  \"\n                      type=\"button\"\n                      onClick={() => {\n                        selectUserId(todo.userId);\n                      }}\n                    >\n                      {todo.userId}\n                    </button>\n                  )}\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { User } from '../../react-app-env';\n\ninterface Props {\n  user: User,\n}\n\nexport const CurrentUser: React.FC<Props> = ({ user }) => (\n  <div className=\"CurrentUser\">\n    <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${user.id}`}</span></h2>\n\n    <h3 className=\"CurrentUser__name\">{user.name}</h3>\n    <p className=\"CurrentUser__email\">{user.email}</p>\n    <p className=\"CurrentUser__phone\">{user.phone}</p>\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\nconst request = (url: string) => {\n  return fetch(`${BASE_URL}${url}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n};\n\nexport const getAllTodos = () => {\n  return request('/todos');\n};\n\nexport const getAllUsers = () => {\n  return request('/users');\n};\n\nexport const getUser = (userId: number) => {\n  return request(`/users/${userId}`);\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { Todo, User } from './react-app-env';\nimport { getAllTodos, getUser } from './api';\n\ninterface State {\n  selectedUserId: number,\n  todos: Todo[] | [],\n  selectedUser: User | null,\n  errorGettingUser: boolean,\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n    selectedUser: null,\n    errorGettingUser: false,\n  };\n\n  componentDidMount() {\n    if (!this.state.selectedUser) {\n      getAllTodos()\n        .then(todos => {\n          this.setState({ todos });\n        });\n    }\n  }\n\n  componentDidUpdate = () => {\n    const currentUserId = this.state.selectedUser && this.state.selectedUser.id;\n    const { errorGettingUser, selectedUserId } = this.state;\n\n    if (selectedUserId && selectedUserId !== currentUserId) {\n      getUser(selectedUserId)\n        .then(selectedUser => {\n          this.setState({ selectedUser, errorGettingUser: false });\n        })\n        .catch(() => {\n          if (!errorGettingUser) {\n            this.setState({ selectedUser: null, errorGettingUser: true });\n          }\n        });\n    }\n  };\n\n  deselectCurrentUser = () => {\n    this.setState({\n      selectedUser: null,\n      selectedUserId: 0,\n    });\n  };\n\n  render() {\n    const {\n      selectedUserId,\n      todos,\n      selectedUser,\n      errorGettingUser,\n    } = this.state;\n    const message = errorGettingUser ? 'Opps, something went wrong :)' : 'No user selected';\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectedIdUser={selectedUserId}\n            selectUserId={(userId: number) => {\n              return this.setState({ selectedUserId: userId });\n            }}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUser ? (\n              <>\n                <button\n                  type=\"button\"\n                  onClick={this.deselectCurrentUser}\n                >\n                  Clear\n                </button>\n                <CurrentUser\n                  user={selectedUser}\n                />\n              </>\n            ) : message}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}